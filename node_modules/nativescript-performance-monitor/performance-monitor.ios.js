"use strict";
var PerformanceMonitor = (function () {
    function PerformanceMonitor() {
    }
    PerformanceMonitor.prototype.start = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var opts = options || {};
            _this._monitor = GDPerformanceMonitor.new();
            _this._monitor.startMonitoringWithConfiguration(function (label) {
                if (opts.backgroundColor) {
                    label.backgroundColor = opts.backgroundColor.ios;
                }
                if (opts.textColor) {
                    label.textColor = opts.textColor.ios;
                }
                if (opts.borderColor) {
                    label.layer.borderColor = opts.borderColor.ios.CGColor;
                }
            });
            _this._monitor.appVersionHidden = true;
            _this._monitor.deviceVersionHidden = true;
            if (opts.onSample) {
                _this._delegate = GDPerformanceMonitorDelegateImpl.initWithOwner(new WeakRef(_this));
                _this._delegate.setCallback(opts.onSample);
                _this._monitor.delegate = _this._delegate;
            }
            if (opts.hide) {
                _this._monitor.hideMonitoring();
            }
            resolve();
        });
    };
    PerformanceMonitor.prototype.stop = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._monitor) {
                _this._monitor.stopMonitoring();
                resolve();
            }
            else {
                reject();
            }
        });
    };
    return PerformanceMonitor;
}());
exports.PerformanceMonitor = PerformanceMonitor;
var GDPerformanceMonitorDelegateImpl = (function (_super) {
    __extends(GDPerformanceMonitorDelegateImpl, _super);
    function GDPerformanceMonitorDelegateImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GDPerformanceMonitorDelegateImpl.initWithOwner = function (owner) {
        var delegate = GDPerformanceMonitorDelegateImpl.new();
        delegate._owner = owner;
        return delegate;
    };
    GDPerformanceMonitorDelegateImpl.new = function () {
        return _super.new.call(this);
    };
    GDPerformanceMonitorDelegateImpl.prototype.setCallback = function (callback) {
        this._callback = callback;
    };
    GDPerformanceMonitorDelegateImpl.prototype.performanceMonitorDidReportFPSCPU = function (fps, cpu) {
        if (this._callback && fps >= 0) {
            this._callback({
                fps: fps,
                cpu: Math.round(cpu * 10) / 10
            });
        }
    };
    return GDPerformanceMonitorDelegateImpl;
}(NSObject));
GDPerformanceMonitorDelegateImpl.ObjCProtocols = [GDPerformanceMonitorDelegate];
//# sourceMappingURL=performance-monitor.ios.js.map
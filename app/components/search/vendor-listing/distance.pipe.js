"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var google_location_service_1 = require("../../../services/google-location.service");
var DistancePipe = (function () {
    function DistancePipe(googleLocationService) {
        this.googleLocationService = googleLocationService;
        this.userLocation = this.googleLocationService.userLocation;
    }
    DistancePipe.prototype.transform = function (vendorLocation) {
        console.log('VendorLocation: ' + JSON.stringify(vendorLocation));
        console.log('UserLocation: ' + JSON.stringify(this.userLocation));
        var lat1 = vendorLocation.lat;
        var lon1 = vendorLocation.lng;
        var lat2 = this.userLocation.latitude;
        var lon2 = this.userLocation.longitude;
        // Checking for undefined param
        if (vendorLocation === undefined || this.userLocation === undefined) {
            return null;
        }
        ;
        var R = 6371; // Radius of the earth in km
        var dLat = this.deg2rad(lat2 - lat1); // deg2rad below
        var dLon = this.deg2rad(lon2 - lon1);
        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        var d = R * c; // Distance in km
        return '(' + (d / 0.621371).toFixed(2).toString() + ' miles)'; // Distance in miles
    };
    DistancePipe.prototype.deg2rad = function (deg) {
        return deg * (Math.PI / 180);
    };
    DistancePipe = __decorate([
        core_1.Pipe({
            name: 'distance'
        }),
        __metadata("design:paramtypes", [google_location_service_1.GoogleLocationService])
    ], DistancePipe);
    return DistancePipe;
}());
exports.DistancePipe = DistancePipe;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzdGFuY2UucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRpc3RhbmNlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBb0Q7QUFFcEQscUZBQWtGO0FBS2xGO0lBR0ksc0JBQW9CLHFCQUE0QztRQUE1QywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBQzVELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQztJQUNoRSxDQUFDO0lBRUQsZ0NBQVMsR0FBVCxVQUFVLGNBQWM7UUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDakUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLElBQUksSUFBSSxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUM7UUFDOUIsSUFBSSxJQUFJLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQztRQUM5QixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztRQUN0QyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUN2QywrQkFBK0I7UUFDL0IsRUFBRSxDQUFDLENBQUMsY0FBYyxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLENBQUMsSUFBSSxDQUFBO1FBQUMsQ0FBQztRQUFBLENBQUM7UUFDckYsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsNEJBQTRCO1FBQzFDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUUsZ0JBQWdCO1FBQ3JELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxHQUNELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzNELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxDQUNsQztRQUNMLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsaUJBQWlCO1FBQ2hDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFHLFNBQVMsQ0FBQSxDQUFDLG9CQUFvQjtJQUN0RixDQUFDO0lBRUQsOEJBQU8sR0FBUCxVQUFRLEdBQUc7UUFDUCxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBQyxHQUFHLENBQUMsQ0FBQTtJQUM5QixDQUFDO0lBL0JRLFlBQVk7UUFIeEIsV0FBSSxDQUFDO1lBQ0YsSUFBSSxFQUFFLFVBQVU7U0FDbkIsQ0FBQzt5Q0FJNkMsK0NBQXFCO09BSHZELFlBQVksQ0FnQ3hCO0lBQUQsbUJBQUM7Q0FBQSxBQWhDRCxJQWdDQztBQWhDWSxvQ0FBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICduYXRpdmVzY3JpcHQtcGx1Z2luLWdvb2dsZS1wbGFjZXMnO1xyXG5pbXBvcnQgeyBHb29nbGVMb2NhdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9nb29nbGUtbG9jYXRpb24uc2VydmljZSc7XHJcblxyXG5AUGlwZSh7XHJcbiAgICBuYW1lOiAnZGlzdGFuY2UnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEaXN0YW5jZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3Jte1xyXG4gICAgcHJpdmF0ZSB1c2VyTG9jYXRpb246IExvY2F0aW9uO1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGdvb2dsZUxvY2F0aW9uU2VydmljZTogR29vZ2xlTG9jYXRpb25TZXJ2aWNlKSB7XHJcbiAgICAgICAgdGhpcy51c2VyTG9jYXRpb24gPSB0aGlzLmdvb2dsZUxvY2F0aW9uU2VydmljZS51c2VyTG9jYXRpb247XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHRyYW5zZm9ybSh2ZW5kb3JMb2NhdGlvbil7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1ZlbmRvckxvY2F0aW9uOiAnICsgSlNPTi5zdHJpbmdpZnkodmVuZG9yTG9jYXRpb24pKTtcclxuICAgICAgICBjb25zb2xlLmxvZygnVXNlckxvY2F0aW9uOiAnICsgSlNPTi5zdHJpbmdpZnkodGhpcy51c2VyTG9jYXRpb24pKTtcclxuICAgICAgICBsZXQgbGF0MSA9IHZlbmRvckxvY2F0aW9uLmxhdDtcclxuICAgICAgICBsZXQgbG9uMSA9IHZlbmRvckxvY2F0aW9uLmxuZztcclxuICAgICAgICBsZXQgbGF0MiA9IHRoaXMudXNlckxvY2F0aW9uLmxhdGl0dWRlO1xyXG4gICAgICAgIGxldCBsb24yID0gdGhpcy51c2VyTG9jYXRpb24ubG9uZ2l0dWRlO1xyXG4gICAgICAgIC8vIENoZWNraW5nIGZvciB1bmRlZmluZWQgcGFyYW1cclxuICAgICAgICBpZiAodmVuZG9yTG9jYXRpb24gPT09IHVuZGVmaW5lZCB8fCB0aGlzLnVzZXJMb2NhdGlvbiA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiBudWxsIH07XHJcbiAgICAgICAgbGV0IFIgPSA2MzcxOyAvLyBSYWRpdXMgb2YgdGhlIGVhcnRoIGluIGttXHJcbiAgICAgICAgbGV0IGRMYXQgPSB0aGlzLmRlZzJyYWQobGF0Mi1sYXQxKTsgIC8vIGRlZzJyYWQgYmVsb3dcclxuICAgICAgICBsZXQgZExvbiA9IHRoaXMuZGVnMnJhZChsb24yLWxvbjEpOyBcclxuICAgICAgICBsZXQgYSA9IFxyXG4gICAgICAgICAgICBNYXRoLnNpbihkTGF0LzIpICogTWF0aC5zaW4oZExhdC8yKSArXHJcbiAgICAgICAgICAgIE1hdGguY29zKHRoaXMuZGVnMnJhZChsYXQxKSkgKiBNYXRoLmNvcyh0aGlzLmRlZzJyYWQobGF0MikpICogXHJcbiAgICAgICAgICAgIE1hdGguc2luKGRMb24vMikgKiBNYXRoLnNpbihkTG9uLzIpXHJcbiAgICAgICAgICAgIDsgXHJcbiAgICAgICAgbGV0IGMgPSAyICogTWF0aC5hdGFuMihNYXRoLnNxcnQoYSksIE1hdGguc3FydCgxLWEpKTsgXHJcbiAgICAgICAgbGV0IGQgPSBSICogYzsgLy8gRGlzdGFuY2UgaW4ga21cclxuICAgICAgICByZXR1cm4gJygnICsgKGQgLyAwLjYyMTM3MSkudG9GaXhlZCgyKS50b1N0cmluZygpICsgJyBtaWxlcyknIC8vIERpc3RhbmNlIGluIG1pbGVzXHJcbiAgICB9XHJcblxyXG4gICAgZGVnMnJhZChkZWcpIHtcclxuICAgICAgICByZXR1cm4gZGVnICogKE1hdGguUEkvMTgwKVxyXG4gICAgfVxyXG59XHJcblxyXG4iXX0=
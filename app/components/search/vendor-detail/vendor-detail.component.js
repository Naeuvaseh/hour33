"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var element_registry_1 = require("nativescript-angular/element-registry");
var common_1 = require("@angular/common");
var vendor_service_1 = require("../../../services/vendor.service");
var settings_1 = require("../../../settings");
element_registry_1.registerElement("MapView", function () { return require("nativescript-google-maps-sdk").MapView; });
var VendorDetailComponent = (function () {
    function VendorDetailComponent(location, vendorService) {
        this.location = location;
        this.vendorService = vendorService;
        this.onMapReady = function (event) {
            console.log("Map Ready");
        };
        this.theme = settings_1.Theme;
        this.vendor = this.vendorService.getSelectedVendor();
    }
    VendorDetailComponent.prototype.ngOnInit = function () {
        this.lat = 32.1234;
        this.long = 32.12345;
    };
    VendorDetailComponent.prototype.goBack = function () {
        this.location.back();
    };
    VendorDetailComponent.prototype.onShare = function () {
        console.log("Shared button tapped.");
    };
    VendorDetailComponent.prototype.formatAddress = function (vendor) {
        return "11700 Marquette Ave. NE,\n Albuquerque NM 87123";
    };
    __decorate([
        core_1.ViewChild("MapView"),
        __metadata("design:type", core_1.ElementRef)
    ], VendorDetailComponent.prototype, "mapView", void 0);
    VendorDetailComponent = __decorate([
        core_1.Component({
            selector: 'vendor-detail',
            templateUrl: './components/search/vendor-detail/vendor-detail.component.html'
        }),
        __metadata("design:paramtypes", [common_1.Location, vendor_service_1.VendorService])
    ], VendorDetailComponent);
    return VendorDetailComponent;
}());
exports.VendorDetailComponent = VendorDetailComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9yLWRldGFpbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2ZW5kb3ItZGV0YWlsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUF5RTtBQUN6RSwwRUFBd0U7QUFDeEUsMENBQTJDO0FBQzNDLG1FQUFpRTtBQUVqRSw4Q0FBMEM7QUFFMUMsa0NBQWUsQ0FBQyxTQUFTLEVBQUUsY0FBTSxPQUFBLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLE9BQU8sRUFBL0MsQ0FBK0MsQ0FBQyxDQUFDO0FBTWxGO0lBU0UsK0JBQW9CLFFBQWtCLEVBQVUsYUFBNEI7UUFBeEQsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBc0I1RSxlQUFVLEdBQUcsVUFBQyxLQUFLO1lBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDO1FBdkJBLElBQUksQ0FBQyxLQUFLLEdBQUcsZ0JBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUN2RCxDQUFDO0lBRUQsd0NBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDO1FBQ25CLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxzQ0FBTSxHQUFOO1FBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsdUNBQU8sR0FBUDtRQUNFLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsNkNBQWEsR0FBYixVQUFjLE1BQWM7UUFDMUIsTUFBTSxDQUFDLGlEQUFpRCxDQUFDO0lBQzNELENBQUM7SUE1QnFCO1FBQXJCLGdCQUFTLENBQUMsU0FBUyxDQUFDO2tDQUFVLGlCQUFVOzBEQUFDO0lBRC9CLHFCQUFxQjtRQUpqQyxnQkFBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGVBQWU7WUFDekIsV0FBVyxFQUFFLGdFQUFnRTtTQUM5RSxDQUFDO3lDQVU4QixpQkFBUSxFQUF5Qiw4QkFBYTtPQVRqRSxxQkFBcUIsQ0FvR2pDO0lBQUQsNEJBQUM7Q0FBQSxBQXBHRCxJQW9HQztBQXBHWSxzREFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIFZpZXdDaGlsZCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IHJlZ2lzdGVyRWxlbWVudCB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9lbGVtZW50LXJlZ2lzdHJ5XCI7XHJcbmltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgVmVuZG9yU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3ZlbmRvci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVmVuZG9yIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcy92ZW5kb3IuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgVGhlbWUgfSBmcm9tICcuLi8uLi8uLi9zZXR0aW5ncyc7XHJcblxyXG5yZWdpc3RlckVsZW1lbnQoXCJNYXBWaWV3XCIsICgpID0+IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtZ29vZ2xlLW1hcHMtc2RrXCIpLk1hcFZpZXcpO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd2ZW5kb3ItZGV0YWlsJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vY29tcG9uZW50cy9zZWFyY2gvdmVuZG9yLWRldGFpbC92ZW5kb3ItZGV0YWlsLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVmVuZG9yRGV0YWlsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBAVmlld0NoaWxkKFwiTWFwVmlld1wiKSBtYXBWaWV3OiBFbGVtZW50UmVmO1xyXG5cclxuICBwcml2YXRlIHRoZW1lO1xyXG4gIHB1YmxpYyB2ZW5kb3I6IFZlbmRvcjtcclxuICBwcml2YXRlIGxhdDogbnVtYmVyO1xyXG4gIHByaXZhdGUgbG9uZzogbnVtYmVyO1xyXG5cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2NhdGlvbjogTG9jYXRpb24sIHByaXZhdGUgdmVuZG9yU2VydmljZTogVmVuZG9yU2VydmljZSkge1xyXG4gICAgdGhpcy50aGVtZSA9IFRoZW1lO1xyXG4gICAgdGhpcy52ZW5kb3IgPSB0aGlzLnZlbmRvclNlcnZpY2UuZ2V0U2VsZWN0ZWRWZW5kb3IoKTtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCl7XHJcbiAgICB0aGlzLmxhdCA9IDMyLjEyMzQ7XHJcbiAgICB0aGlzLmxvbmcgPSAzMi4xMjM0NTtcclxuICB9XHJcblxyXG4gIGdvQmFjaygpe1xyXG4gICAgdGhpcy5sb2NhdGlvbi5iYWNrKCk7XHJcbiAgfVxyXG4gIFxyXG4gIG9uU2hhcmUoKXtcclxuICAgIGNvbnNvbGUubG9nKFwiU2hhcmVkIGJ1dHRvbiB0YXBwZWQuXCIpOyBcclxuICB9XHJcblxyXG4gIGZvcm1hdEFkZHJlc3ModmVuZG9yOiBWZW5kb3IpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIFwiMTE3MDAgTWFycXVldHRlIEF2ZS4gTkUsXFxuIEFsYnVxdWVycXVlIE5NIDg3MTIzXCI7XHJcbiAgfVxyXG5cclxuICBvbk1hcFJlYWR5ID0gKGV2ZW50KSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcIk1hcCBSZWFkeVwiKTtcclxuICB9O1xyXG5cclxuLy8gKioqKioqIE1hcHMgRGVtbyBDb2RlICoqKioqKiAvL1xyXG5cclxuLy8gICBwdWJsaWMgb25NYXBSZWFkeSA9IChldmVudCkgPT4ge1xyXG4vLyAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbi8vICAgICAgICAgLy9hbGVydCh0aGlzLmhlYXRNYXApO1xyXG4vLyAgICAgfSwgMTAwMDApO1xyXG4vLyAgICAgdmFyIG1vZGVsID0gbmV3IE1hcENvbXBvbmVudCh0aGlzLnBhZ2UsIHRoaXMuaHR0cFNlcnZpY2UpO1xyXG4vLyAgICAgbGV0IG1hcFZpZXcgPSBldmVudC5vYmplY3Q7XHJcbi8vICAgICB0aGlzLm1hcFZpZXcgPSBtYXBWaWV3O1xyXG4vLyAgICAgLy9sZXQgcG9seSA9IG5ldyBQb2x5Z29uKCk7XHJcbi8vICAgICAvL3ZhciBwb29vb2x5ID0gW1xyXG4vLyAgICAgLy8gICAgUG9zaXRpb24ucG9zaXRpb25Gcm9tTGF0TG5nKDQwLjE2MDgwNzMwMTQ2NDg4NSwgLTgzLjAwODc5NTM4MDU5MjI5KSxcclxuLy8gICAgIC8vICAgIFBvc2l0aW9uLnBvc2l0aW9uRnJvbUxhdExuZyg0MC4xNjA1MDE4NzM5Njc4NDYsIC04My4wMDg3NzEyNDA3MTExNiksXHJcbi8vICAgICAvLyAgICBQb3NpdGlvbi5wb3NpdGlvbkZyb21MYXRMbmcoNDAuMTYwNDg5NTc0ODQ1MiwgLTgzLjAwODY0NTE3Njg4NzQ2KSxcclxuLy8gICAgIC8vICAgIFBvc2l0aW9uLnBvc2l0aW9uRnJvbUxhdExuZyg0MC4xNjA4MTI0MjYwNzU2MSwgLTgzLjAwODY2NjYzNDU1OTYzKSxcclxuLy8gICAgIC8vICAgIFBvc2l0aW9uLnBvc2l0aW9uRnJvbUxhdExuZyg0MC4xNjA4MDczMDE0NjQ4ODUsIC04My4wMDg3OTUzODA1OTIyOSlcclxuICAgICAgICBcclxuLy8gICAgIC8vXTtcclxuLy8gICAgIC8vcG9seS5hZGRQb2ludHMocG9vb29seSk7XHJcbi8vICAgICAvL3BvbHkuZmlsbENvbG9yID0gbmV3IENvbG9yKFwiI0ZGOTgwMFwiKTtcclxuLy8gICAgIC8vcG9seS5zdHJva2VDb2xvciA9IG5ldyBDb2xvcihcIiMwMDdEQzNcIik7XHJcbi8vICAgICAvL3BvbHkuc3Ryb2tlV2lkdGggPSAyO1xyXG4vLyAgICAgLy9wb2x5LnZpc2libGUgPSB0cnVlO1xyXG4vLyAgICAgLy9tYXBWaWV3LmFkZFBvbHlnb24ocG9seSk7XHJcbi8vICAgICBjb25zb2xlLmxvZyhBY2N1cmFjeS5oaWdoKVxyXG4vLyAgICAgLy9jb25zb2xlLmxvZygndGVzdCcpO1xyXG4vLyAgICAgdmFyIG1hcmtlciA9IG5ldyBtYXBzTW9kdWxlLk1hcmtlcigpO1xyXG4vLyAgICAgLy9jb25zb2xlLmxvZyhtYXBWaWV3KTtcclxuLy8gICAgIG1hcmtlci50aXRsZSA9IFwibWFya2VyMVwiO1xyXG4vLyAgICAgbWFya2VyLnBvc2l0aW9uID0gbWFwc01vZHVsZS5Qb3NpdGlvbi5wb3NpdGlvbkZyb21MYXRMbmcodGhpcy5wb2ludDEubGF0aXR1ZGUsIHRoaXMucG9pbnQxLmxvbmdpdHVkZSk7XHJcbi8vICAgICBtYXJrZXIudXNlckRhdGEgPSB7IGluZGV4OiAxIH07XHJcbi8vICAgICBtYXBWaWV3LmFkZE1hcmtlcihtYXJrZXIpO1xyXG5cclxuLy8gICAgIC8vdGhpcy5hZGRIZWF0KCk7XHJcbi8vICAgICB2YXIgbG9jYXRpb24gPSBnZW9sb2NhdGlvbi5nZXRDdXJyZW50TG9jYXRpb24oeyBkZXNpcmVkQWNjdXJhY3k6IEFjY3VyYWN5LmhpZ2gsIHVwZGF0ZURpc3RhbmNlOiAwLjEsIG1heGltdW1BZ2U6IDUwMDAsIHRpbWVvdXQ6IDIwMDAwIH0pLlxyXG4vLyAgICAgICAgIHRoZW4oKGxvYykgPT4ge1xyXG4vLyAgICAgICAgICAgICBpZiAobG9jKSB7XHJcbi8vICAgICAgICAgICAgICAgICBtb2RlbC5sb2NhdGlvbnMucHVzaChsb2MpO1xyXG4vLyAgICAgICAgICAgICAgICAgLy9hbGVydChKU09OLnN0cmluZ2lmeShsb2MpKTtcclxuLy8gICAgICAgICAgICAgICAgIC8vIFdyaXRpbmcgdGV4dCB0byB0aGUgZmlsZS5cclxuLy8gICAgICAgICAgICAgICAgIGxldCB0ZW1wTWFya2VyID0geyBsYXRpdHVkZTogbG9jLmxhdGl0dWRlLCBsb25naXR1ZGU6IGxvYy5sb25naXR1ZGUsIHRpdGxlOiAnbWUnIH07XHJcbiAgICAgICAgICAgICAgICBcclxuLy8gICAgICAgICAgICAgICAgIC8vYWxlcnQoSlNPTi5zdHJpbmdpZnkodGVtcE1hcmtlcikpXHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLm1hcmtlcnMucHVzaCh0ZW1wTWFya2VyKTtcclxuLy8gICAgICAgICAgICAgICAgIC8vYWxlcnQoSlNPTi5zdHJpbmdpZnkodGhpcy5tYXJrZXJzKSlcclxuLy8gICAgICAgICAgICAgICAgdmFyIG1hcmtlcjIgPSBuZXcgbWFwc01vZHVsZS5NYXJrZXIoKTtcclxuLy8gICAgICAgICAgICAgICAgIG1hcmtlcjIudGl0bGUgPSBcIm1lXCI7XHJcbi8vICAgICAgICAgICAgICAgICBtYXJrZXIyLnBvc2l0aW9uID0gbWFwc01vZHVsZS5Qb3NpdGlvbi5wb3NpdGlvbkZyb21MYXRMbmcobG9jLmxhdGl0dWRlLCBsb2MubG9uZ2l0dWRlKTtcclxuLy8gICAgICAgICAgICAgICAgIG1hcmtlcjIudXNlckRhdGEgPSB7IGluZGV4OiAxIH07XHJcbi8vICAgICAgICAgICAgICAgICBtYXBWaWV3LmFkZE1hcmtlcihtYXJrZXIyKTtcclxuICAgICAgICAgICAgICAgIFxyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5tYXJrZXJzLnB1c2gobWFya2VyKVxyXG4vLyAgICAgICAgICAgICAgICAgLy9hbGVydCh0aGlzLm1hcmtlcnMpXHJcbi8vICAgICAgICAgICAgICAgICAvL2NvbnNvbGUuZGlyKHRoaXMubWFya2VycylcclxuLy8gICAgICAgICAgICAgICAgIC8vY29uc29sZS5kaXIoT2JqZWN0LmtleXMobWFwVmlldykpXHJcbi8vICAgICAgICAgICAgICAgICAvL2NvbnNvbGUuZGlyKG1hcFZpZXcuX21hcmtlcnMpXHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmxvYWRlci5oaWRlKCk7XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLndhdGNoTG9jYXRpb24obW9kZWwsIG1hcFZpZXcpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHtcclxuLy8gICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvciEhISEhISExOiBcIiArIGUubWVzc2FnZSk7XHJcbi8vICAgICAgICAgICAgIHRoaXMub25NYXBSZWFkeShldmVudCk7XHJcbi8vICAgICAgICAgfSk7XHJcbi8vICAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcclxuLy8gfTtcclxufSJdfQ==
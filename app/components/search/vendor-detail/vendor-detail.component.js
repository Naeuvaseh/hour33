"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var element_registry_1 = require("nativescript-angular/element-registry");
var common_1 = require("@angular/common");
var vendor_service_1 = require("../../../services/vendor.service");
var settings_1 = require("../../../settings");
element_registry_1.registerElement("MapView", function () { return require("nativescript-google-maps-sdk").MapView; });
var VendorDetailComponent = (function () {
    function VendorDetailComponent(location, vendorService) {
        this.location = location;
        this.vendorService = vendorService;
        this.onMapReady = function (event) {
            console.log("Map Ready");
        };
        this.theme = settings_1.Theme;
        this.vendor = this.vendorService.getSelectedVendor();
    }
    VendorDetailComponent.prototype.goBack = function () {
        this.location.back();
    };
    VendorDetailComponent.prototype.onShare = function () {
        console.log("Shared button tapped.");
    };
    __decorate([
        core_1.ViewChild("MapView"),
        __metadata("design:type", core_1.ElementRef)
    ], VendorDetailComponent.prototype, "mapView", void 0);
    VendorDetailComponent = __decorate([
        core_1.Component({
            selector: 'vendor-detail',
            templateUrl: './components/search/vendor-detail/vendor-detail.component.html'
        }),
        __metadata("design:paramtypes", [common_1.Location, vendor_service_1.VendorService])
    ], VendorDetailComponent);
    return VendorDetailComponent;
}());
exports.VendorDetailComponent = VendorDetailComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9yLWRldGFpbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2ZW5kb3ItZGV0YWlsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUFpRTtBQUNqRSwwRUFBd0U7QUFDeEUsMENBQTJDO0FBQzNDLG1FQUFpRTtBQUVqRSw4Q0FBMEM7QUFFMUMsa0NBQWUsQ0FBQyxTQUFTLEVBQUUsY0FBTSxPQUFBLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLE9BQU8sRUFBL0MsQ0FBK0MsQ0FBQyxDQUFDO0FBTWxGO0lBTUUsK0JBQW9CLFFBQWtCLEVBQVUsYUFBNEI7UUFBeEQsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBYTVFLGVBQVUsR0FBRyxVQUFDLEtBQUs7WUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUM7UUFkQSxJQUFJLENBQUMsS0FBSyxHQUFHLGdCQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDdkQsQ0FBQztJQUVELHNDQUFNLEdBQU47UUFDRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCx1Q0FBTyxHQUFQO1FBQ0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFoQnFCO1FBQXJCLGdCQUFTLENBQUMsU0FBUyxDQUFDO2tDQUFVLGlCQUFVOzBEQUFDO0lBRC9CLHFCQUFxQjtRQUpqQyxnQkFBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGVBQWU7WUFDekIsV0FBVyxFQUFFLGdFQUFnRTtTQUM5RSxDQUFDO3lDQU84QixpQkFBUSxFQUF5Qiw4QkFBYTtPQU5qRSxxQkFBcUIsQ0F3RmpDO0lBQUQsNEJBQUM7Q0FBQSxBQXhGRCxJQXdGQztBQXhGWSxzREFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyByZWdpc3RlckVsZW1lbnQgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWFuZ3VsYXIvZWxlbWVudC1yZWdpc3RyeVwiO1xyXG5pbXBvcnQgeyBMb2NhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IFZlbmRvclNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy92ZW5kb3Iuc2VydmljZSc7XHJcbmltcG9ydCB7IFZlbmRvciB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMvdmVuZG9yLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFRoZW1lIH0gZnJvbSAnLi4vLi4vLi4vc2V0dGluZ3MnO1xyXG5cclxucmVnaXN0ZXJFbGVtZW50KFwiTWFwVmlld1wiLCAoKSA9PiByZXF1aXJlKFwibmF0aXZlc2NyaXB0LWdvb2dsZS1tYXBzLXNka1wiKS5NYXBWaWV3KTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAndmVuZG9yLWRldGFpbCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2NvbXBvbmVudHMvc2VhcmNoL3ZlbmRvci1kZXRhaWwvdmVuZG9yLWRldGFpbC5jb21wb25lbnQuaHRtbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFZlbmRvckRldGFpbENvbXBvbmVudCB7XHJcbiAgQFZpZXdDaGlsZChcIk1hcFZpZXdcIikgbWFwVmlldzogRWxlbWVudFJlZjtcclxuXHJcbiAgcHJpdmF0ZSB0aGVtZTtcclxuICBwdWJsaWMgdmVuZG9yOiBWZW5kb3I7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9jYXRpb246IExvY2F0aW9uLCBwcml2YXRlIHZlbmRvclNlcnZpY2U6IFZlbmRvclNlcnZpY2UpIHtcclxuICAgIHRoaXMudGhlbWUgPSBUaGVtZTtcclxuICAgIHRoaXMudmVuZG9yID0gdGhpcy52ZW5kb3JTZXJ2aWNlLmdldFNlbGVjdGVkVmVuZG9yKCk7XHJcbiAgfVxyXG5cclxuICBnb0JhY2soKXtcclxuICAgIHRoaXMubG9jYXRpb24uYmFjaygpO1xyXG4gIH1cclxuICBcclxuICBvblNoYXJlKCl7XHJcbiAgICBjb25zb2xlLmxvZyhcIlNoYXJlZCBidXR0b24gdGFwcGVkLlwiKTsgXHJcbiAgfVxyXG5cclxuICBvbk1hcFJlYWR5ID0gKGV2ZW50KSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcIk1hcCBSZWFkeVwiKTtcclxuICB9O1xyXG5cclxuLy8gKioqKioqIE1hcHMgRGVtbyBDb2RlICoqKioqKiAvL1xyXG5cclxuLy8gICBwdWJsaWMgb25NYXBSZWFkeSA9IChldmVudCkgPT4ge1xyXG4vLyAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbi8vICAgICAgICAgLy9hbGVydCh0aGlzLmhlYXRNYXApO1xyXG4vLyAgICAgfSwgMTAwMDApO1xyXG4vLyAgICAgdmFyIG1vZGVsID0gbmV3IE1hcENvbXBvbmVudCh0aGlzLnBhZ2UsIHRoaXMuaHR0cFNlcnZpY2UpO1xyXG4vLyAgICAgbGV0IG1hcFZpZXcgPSBldmVudC5vYmplY3Q7XHJcbi8vICAgICB0aGlzLm1hcFZpZXcgPSBtYXBWaWV3O1xyXG4vLyAgICAgLy9sZXQgcG9seSA9IG5ldyBQb2x5Z29uKCk7XHJcbi8vICAgICAvL3ZhciBwb29vb2x5ID0gW1xyXG4vLyAgICAgLy8gICAgUG9zaXRpb24ucG9zaXRpb25Gcm9tTGF0TG5nKDQwLjE2MDgwNzMwMTQ2NDg4NSwgLTgzLjAwODc5NTM4MDU5MjI5KSxcclxuLy8gICAgIC8vICAgIFBvc2l0aW9uLnBvc2l0aW9uRnJvbUxhdExuZyg0MC4xNjA1MDE4NzM5Njc4NDYsIC04My4wMDg3NzEyNDA3MTExNiksXHJcbi8vICAgICAvLyAgICBQb3NpdGlvbi5wb3NpdGlvbkZyb21MYXRMbmcoNDAuMTYwNDg5NTc0ODQ1MiwgLTgzLjAwODY0NTE3Njg4NzQ2KSxcclxuLy8gICAgIC8vICAgIFBvc2l0aW9uLnBvc2l0aW9uRnJvbUxhdExuZyg0MC4xNjA4MTI0MjYwNzU2MSwgLTgzLjAwODY2NjYzNDU1OTYzKSxcclxuLy8gICAgIC8vICAgIFBvc2l0aW9uLnBvc2l0aW9uRnJvbUxhdExuZyg0MC4xNjA4MDczMDE0NjQ4ODUsIC04My4wMDg3OTUzODA1OTIyOSlcclxuICAgICAgICBcclxuLy8gICAgIC8vXTtcclxuLy8gICAgIC8vcG9seS5hZGRQb2ludHMocG9vb29seSk7XHJcbi8vICAgICAvL3BvbHkuZmlsbENvbG9yID0gbmV3IENvbG9yKFwiI0ZGOTgwMFwiKTtcclxuLy8gICAgIC8vcG9seS5zdHJva2VDb2xvciA9IG5ldyBDb2xvcihcIiMwMDdEQzNcIik7XHJcbi8vICAgICAvL3BvbHkuc3Ryb2tlV2lkdGggPSAyO1xyXG4vLyAgICAgLy9wb2x5LnZpc2libGUgPSB0cnVlO1xyXG4vLyAgICAgLy9tYXBWaWV3LmFkZFBvbHlnb24ocG9seSk7XHJcbi8vICAgICBjb25zb2xlLmxvZyhBY2N1cmFjeS5oaWdoKVxyXG4vLyAgICAgLy9jb25zb2xlLmxvZygndGVzdCcpO1xyXG4vLyAgICAgdmFyIG1hcmtlciA9IG5ldyBtYXBzTW9kdWxlLk1hcmtlcigpO1xyXG4vLyAgICAgLy9jb25zb2xlLmxvZyhtYXBWaWV3KTtcclxuLy8gICAgIG1hcmtlci50aXRsZSA9IFwibWFya2VyMVwiO1xyXG4vLyAgICAgbWFya2VyLnBvc2l0aW9uID0gbWFwc01vZHVsZS5Qb3NpdGlvbi5wb3NpdGlvbkZyb21MYXRMbmcodGhpcy5wb2ludDEubGF0aXR1ZGUsIHRoaXMucG9pbnQxLmxvbmdpdHVkZSk7XHJcbi8vICAgICBtYXJrZXIudXNlckRhdGEgPSB7IGluZGV4OiAxIH07XHJcbi8vICAgICBtYXBWaWV3LmFkZE1hcmtlcihtYXJrZXIpO1xyXG5cclxuLy8gICAgIC8vdGhpcy5hZGRIZWF0KCk7XHJcbi8vICAgICB2YXIgbG9jYXRpb24gPSBnZW9sb2NhdGlvbi5nZXRDdXJyZW50TG9jYXRpb24oeyBkZXNpcmVkQWNjdXJhY3k6IEFjY3VyYWN5LmhpZ2gsIHVwZGF0ZURpc3RhbmNlOiAwLjEsIG1heGltdW1BZ2U6IDUwMDAsIHRpbWVvdXQ6IDIwMDAwIH0pLlxyXG4vLyAgICAgICAgIHRoZW4oKGxvYykgPT4ge1xyXG4vLyAgICAgICAgICAgICBpZiAobG9jKSB7XHJcbi8vICAgICAgICAgICAgICAgICBtb2RlbC5sb2NhdGlvbnMucHVzaChsb2MpO1xyXG4vLyAgICAgICAgICAgICAgICAgLy9hbGVydChKU09OLnN0cmluZ2lmeShsb2MpKTtcclxuLy8gICAgICAgICAgICAgICAgIC8vIFdyaXRpbmcgdGV4dCB0byB0aGUgZmlsZS5cclxuLy8gICAgICAgICAgICAgICAgIGxldCB0ZW1wTWFya2VyID0geyBsYXRpdHVkZTogbG9jLmxhdGl0dWRlLCBsb25naXR1ZGU6IGxvYy5sb25naXR1ZGUsIHRpdGxlOiAnbWUnIH07XHJcbiAgICAgICAgICAgICAgICBcclxuLy8gICAgICAgICAgICAgICAgIC8vYWxlcnQoSlNPTi5zdHJpbmdpZnkodGVtcE1hcmtlcikpXHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLm1hcmtlcnMucHVzaCh0ZW1wTWFya2VyKTtcclxuLy8gICAgICAgICAgICAgICAgIC8vYWxlcnQoSlNPTi5zdHJpbmdpZnkodGhpcy5tYXJrZXJzKSlcclxuLy8gICAgICAgICAgICAgICAgdmFyIG1hcmtlcjIgPSBuZXcgbWFwc01vZHVsZS5NYXJrZXIoKTtcclxuLy8gICAgICAgICAgICAgICAgIG1hcmtlcjIudGl0bGUgPSBcIm1lXCI7XHJcbi8vICAgICAgICAgICAgICAgICBtYXJrZXIyLnBvc2l0aW9uID0gbWFwc01vZHVsZS5Qb3NpdGlvbi5wb3NpdGlvbkZyb21MYXRMbmcobG9jLmxhdGl0dWRlLCBsb2MubG9uZ2l0dWRlKTtcclxuLy8gICAgICAgICAgICAgICAgIG1hcmtlcjIudXNlckRhdGEgPSB7IGluZGV4OiAxIH07XHJcbi8vICAgICAgICAgICAgICAgICBtYXBWaWV3LmFkZE1hcmtlcihtYXJrZXIyKTtcclxuICAgICAgICAgICAgICAgIFxyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5tYXJrZXJzLnB1c2gobWFya2VyKVxyXG4vLyAgICAgICAgICAgICAgICAgLy9hbGVydCh0aGlzLm1hcmtlcnMpXHJcbi8vICAgICAgICAgICAgICAgICAvL2NvbnNvbGUuZGlyKHRoaXMubWFya2VycylcclxuLy8gICAgICAgICAgICAgICAgIC8vY29uc29sZS5kaXIoT2JqZWN0LmtleXMobWFwVmlldykpXHJcbi8vICAgICAgICAgICAgICAgICAvL2NvbnNvbGUuZGlyKG1hcFZpZXcuX21hcmtlcnMpXHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmxvYWRlci5oaWRlKCk7XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLndhdGNoTG9jYXRpb24obW9kZWwsIG1hcFZpZXcpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHtcclxuLy8gICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvciEhISEhISExOiBcIiArIGUubWVzc2FnZSk7XHJcbi8vICAgICAgICAgICAgIHRoaXMub25NYXBSZWFkeShldmVudCk7XHJcbi8vICAgICAgICAgfSk7XHJcbi8vICAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcclxuLy8gfTtcclxufSJdfQ==
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// this import should be first in order to load some required settings (like globals and reflect-metadata)
var platform_1 = require("nativescript-angular/platform");
var app_module_1 = require("./app.module");
var settings_1 = require("./settings");
// Firebase
var firebase = require("nativescript-plugin-firebase");
// Geolocation
var geolocation = require("nativescript-geolocation");
// Google Places
var GooglePlaces = require("nativescript-plugin-google-places");
// Init Firebase API
firebase.init({
    onAuthStateChanged: function (data) {
        if (settings_1.Debug.console.Firebase.email)
            console.log(data.loggedIn ? "Logged in to firebase: " + data.user.email : "Logged out from firebase");
        if (data.loggedIn && settings_1.Debug.console.Firebase.fullUser) {
            console.log("User Data: " + (JSON.stringify(data)));
        }
    },
    onPushTokenReceivedCallback: function (token) {
        console.log("Firebase push token: " + token);
    },
    onMessageReceivedCallback: function (message) {
        console.log("Title: " + message.title);
        console.log("Body: " + message.body);
        // if your server passed a custom property called 'foo', then do this:
        console.log("Value of 'foo': " + message.data.foo);
    }
}).then(function (instance) {
    console.log("firebase.init done");
}, function (error) {
    console.log("firebase.init error: " + error);
});
// Init Location
if (!geolocation.isEnabled)
    geolocation.enableLocationRequest();
// Init Google Places API
GooglePlaces.init();
platform_1.platformNativeScriptDynamic().bootstrapModule(app_module_1.AppModule);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwR0FBMEc7QUFDMUcsMERBQTRFO0FBQzVFLDJDQUF5QztBQUN6Qyx1Q0FBbUM7QUFDbkMsV0FBVztBQUNYLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0FBRXpELGNBQWM7QUFDZCxzREFBd0Q7QUFFeEQsZ0JBQWdCO0FBQ2hCLGdFQUFrRTtBQUVsRSxvQkFBb0I7QUFDcEIsUUFBUSxDQUFDLElBQUksQ0FBQztJQUNaLGtCQUFrQixFQUFFLFVBQVMsSUFBSTtRQUMvQixFQUFFLENBQUEsQ0FBQyxnQkFBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLHlCQUF5QixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLDBCQUEwQixDQUFDLENBQUM7UUFDdkksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxnQkFBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNyRCxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELENBQUM7SUFDSCxDQUFDO0lBQ0QsMkJBQTJCLEVBQUUsVUFBUyxLQUFLO1FBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUNELHlCQUF5QixFQUFFLFVBQUMsT0FBZ0I7UUFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFVLE9BQU8sQ0FBQyxLQUFPLENBQUMsQ0FBQztRQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVMsT0FBTyxDQUFDLElBQU0sQ0FBQyxDQUFDO1FBQ3JDLHNFQUFzRTtRQUN0RSxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFtQixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUssQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FDRixDQUFDLENBQUMsSUFBSSxDQUNMLFVBQUEsUUFBUTtJQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNwQyxDQUFDLEVBQ0QsVUFBQSxLQUFLO0lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBd0IsS0FBTyxDQUFDLENBQUM7QUFDL0MsQ0FBQyxDQUNGLENBQUM7QUFFRixnQkFBZ0I7QUFDaEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDO0lBQUMsV0FBVyxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDaEUseUJBQXlCO0FBQ3pCLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUVwQixzQ0FBMkIsRUFBRSxDQUFDLGVBQWUsQ0FBQyxzQkFBUyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0aGlzIGltcG9ydCBzaG91bGQgYmUgZmlyc3QgaW4gb3JkZXIgdG8gbG9hZCBzb21lIHJlcXVpcmVkIHNldHRpbmdzIChsaWtlIGdsb2JhbHMgYW5kIHJlZmxlY3QtbWV0YWRhdGEpXHJcbmltcG9ydCB7IHBsYXRmb3JtTmF0aXZlU2NyaXB0RHluYW1pYyB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9wbGF0Zm9ybVwiO1xyXG5pbXBvcnQgeyBBcHBNb2R1bGUgfSBmcm9tIFwiLi9hcHAubW9kdWxlXCI7XHJcbmltcG9ydCB7IERlYnVnIH0gZnJvbSAnLi9zZXR0aW5ncyc7XHJcbi8vIEZpcmViYXNlXHJcbmNvbnN0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XHJcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tIFwibmF0aXZlc2NyaXB0LXBsdWdpbi1maXJlYmFzZS9maXJlYmFzZVwiO1xyXG4vLyBHZW9sb2NhdGlvblxyXG5pbXBvcnQgKiBhcyBnZW9sb2NhdGlvbiBmcm9tIFwibmF0aXZlc2NyaXB0LWdlb2xvY2F0aW9uXCI7XHJcbmltcG9ydCB7IEFjY3VyYWN5IH0gZnJvbSBcInVpL2VudW1zXCI7XHJcbi8vIEdvb2dsZSBQbGFjZXNcclxuaW1wb3J0ICogYXMgR29vZ2xlUGxhY2VzIGZyb20gJ25hdGl2ZXNjcmlwdC1wbHVnaW4tZ29vZ2xlLXBsYWNlcyc7XHJcblxyXG4vLyBJbml0IEZpcmViYXNlIEFQSVxyXG5maXJlYmFzZS5pbml0KHtcclxuICBvbkF1dGhTdGF0ZUNoYW5nZWQ6IGZ1bmN0aW9uKGRhdGEpIHsgXHJcbiAgICBpZihEZWJ1Zy5jb25zb2xlLkZpcmViYXNlLmVtYWlsKSBjb25zb2xlLmxvZyhkYXRhLmxvZ2dlZEluID8gXCJMb2dnZWQgaW4gdG8gZmlyZWJhc2U6IFwiICsgZGF0YS51c2VyLmVtYWlsIDogXCJMb2dnZWQgb3V0IGZyb20gZmlyZWJhc2VcIik7XHJcbiAgICBpZiAoZGF0YS5sb2dnZWRJbiAmJiBEZWJ1Zy5jb25zb2xlLkZpcmViYXNlLmZ1bGxVc2VyKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiVXNlciBEYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgb25QdXNoVG9rZW5SZWNlaXZlZENhbGxiYWNrOiBmdW5jdGlvbih0b2tlbikge1xyXG4gICAgY29uc29sZS5sb2coXCJGaXJlYmFzZSBwdXNoIHRva2VuOiBcIiArIHRva2VuKTtcclxuICB9LFxyXG4gIG9uTWVzc2FnZVJlY2VpdmVkQ2FsbGJhY2s6IChtZXNzYWdlOiBNZXNzYWdlKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhgVGl0bGU6ICR7bWVzc2FnZS50aXRsZX1gKTtcclxuICAgIGNvbnNvbGUubG9nKGBCb2R5OiAke21lc3NhZ2UuYm9keX1gKTtcclxuICAgIC8vIGlmIHlvdXIgc2VydmVyIHBhc3NlZCBhIGN1c3RvbSBwcm9wZXJ0eSBjYWxsZWQgJ2ZvbycsIHRoZW4gZG8gdGhpczpcclxuICAgIGNvbnNvbGUubG9nKGBWYWx1ZSBvZiAnZm9vJzogJHttZXNzYWdlLmRhdGEuZm9vfWApO1xyXG4gIH1cclxufSkudGhlbihcclxuICBpbnN0YW5jZSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcImZpcmViYXNlLmluaXQgZG9uZVwiKTtcclxuICB9LFxyXG4gIGVycm9yID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGBmaXJlYmFzZS5pbml0IGVycm9yOiAke2Vycm9yfWApO1xyXG4gIH1cclxuKTtcclxuXHJcbi8vIEluaXQgTG9jYXRpb25cclxuaWYgKCFnZW9sb2NhdGlvbi5pc0VuYWJsZWQpIGdlb2xvY2F0aW9uLmVuYWJsZUxvY2F0aW9uUmVxdWVzdCgpO1xyXG4vLyBJbml0IEdvb2dsZSBQbGFjZXMgQVBJXHJcbkdvb2dsZVBsYWNlcy5pbml0KCk7XHJcblxyXG5wbGF0Zm9ybU5hdGl2ZVNjcmlwdER5bmFtaWMoKS5ib290c3RyYXBNb2R1bGUoQXBwTW9kdWxlKTtcclxuIl19
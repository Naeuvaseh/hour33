"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// this import should be first in order to load some required settings (like globals and reflect-metadata)
var platform_1 = require("nativescript-angular/platform");
var app_module_1 = require("./app.module");
var settings_1 = require("./settings");
// Firebase
var firebase = require("nativescript-plugin-firebase");
// Geolocation
var geolocation = require("nativescript-geolocation");
// Google Places
var GooglePlaces = require("nativescript-plugin-google-places");
// Init Firebase API
firebase.init({
    onAuthStateChanged: function (data) {
        if (settings_1.Debug.console.Firebase.email)
            console.log(data.loggedIn ? "Logged in to firebase: " + data.user.email : "Logged out from firebase");
        if (data.loggedIn && settings_1.Debug.console.Firebase.fullUser) {
            console.log("User Data: " + (JSON.stringify(data)));
        }
    },
    onPushTokenReceivedCallback: function (token) {
        console.log("Firebase push token: " + token);
    },
    onMessageReceivedCallback: function (message) {
        console.log("Title: " + message.title);
        console.log("Body: " + message.body);
        // if your server passed a custom property called 'foo', then do this:
        console.log("Value of 'foo': " + message.data.foo);
    }
}).then(function (instance) {
    console.log("firebase.init done");
}, function (error) {
    console.log("firebase.init error: " + error);
});
firebase.admob.showBanner({
    size: firebase.admob.AD_SIZE.SMART_BANNER,
    margins: {
        bottom: 10,
        top: 0
    },
    androidBannerId: "ca-app-pub-7969618441217720/9053703415",
    testing: true,
}).then(function () {
    console.log("AdMob banner showing");
}, function (errorMessage) {
    alert({
        title: "AdMob error",
        message: errorMessage,
        okButtonText: "Hmmkay"
    });
});
// Init Location
if (!geolocation.isEnabled)
    geolocation.enableLocationRequest();
// Init Google Places API
GooglePlaces.init();
platform_1.platformNativeScriptDynamic().bootstrapModule(app_module_1.AppModule);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwR0FBMEc7QUFDMUcsMERBQTRFO0FBQzVFLDJDQUF5QztBQUN6Qyx1Q0FBbUM7QUFDbkMsV0FBVztBQUNYLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0FBRXpELGNBQWM7QUFDZCxzREFBd0Q7QUFFeEQsZ0JBQWdCO0FBQ2hCLGdFQUFrRTtBQUVsRSxvQkFBb0I7QUFDcEIsUUFBUSxDQUFDLElBQUksQ0FBQztJQUNaLGtCQUFrQixFQUFFLFVBQVMsSUFBSTtRQUMvQixFQUFFLENBQUEsQ0FBQyxnQkFBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUN2SSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLGdCQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3JELE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsQ0FBQztJQUNILENBQUM7SUFDRCwyQkFBMkIsRUFBRSxVQUFTLEtBQUs7UUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBQ0QseUJBQXlCLEVBQUUsVUFBQyxPQUFnQjtRQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVUsT0FBTyxDQUFDLEtBQU8sQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBUyxPQUFPLENBQUMsSUFBTSxDQUFDLENBQUM7UUFDckMsc0VBQXNFO1FBQ3RFLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQW1CLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBSyxDQUFDLENBQUM7SUFDckQsQ0FBQztDQUNGLENBQUMsQ0FBQyxJQUFJLENBQ0wsVUFBQSxRQUFRO0lBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3BDLENBQUMsRUFDRCxVQUFBLEtBQUs7SUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUF3QixLQUFPLENBQUMsQ0FBQztBQUMvQyxDQUFDLENBQ0YsQ0FBQztBQUVGLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDO0lBQ3hCLElBQUksRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZO0lBQ3pDLE9BQU8sRUFBRTtRQUNQLE1BQU0sRUFBRSxFQUFFO1FBQ1YsR0FBRyxFQUFFLENBQUM7S0FDUDtJQUNELGVBQWUsRUFBRSx3Q0FBd0M7SUFDekQsT0FBTyxFQUFFLElBQUk7Q0FLZCxDQUFDLENBQUMsSUFBSSxDQUNIO0lBQ0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3RDLENBQUMsRUFDRCxVQUFVLFlBQVk7SUFDcEIsS0FBSyxDQUFDO1FBQ0osS0FBSyxFQUFFLGFBQWE7UUFDcEIsT0FBTyxFQUFFLFlBQVk7UUFDckIsWUFBWSxFQUFFLFFBQVE7S0FDdkIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUNKLENBQUM7QUFFRixnQkFBZ0I7QUFDaEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDO0lBQUMsV0FBVyxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDaEUseUJBQXlCO0FBQ3pCLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUVwQixzQ0FBMkIsRUFBRSxDQUFDLGVBQWUsQ0FBQyxzQkFBUyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0aGlzIGltcG9ydCBzaG91bGQgYmUgZmlyc3QgaW4gb3JkZXIgdG8gbG9hZCBzb21lIHJlcXVpcmVkIHNldHRpbmdzIChsaWtlIGdsb2JhbHMgYW5kIHJlZmxlY3QtbWV0YWRhdGEpXHJcbmltcG9ydCB7IHBsYXRmb3JtTmF0aXZlU2NyaXB0RHluYW1pYyB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9wbGF0Zm9ybVwiO1xyXG5pbXBvcnQgeyBBcHBNb2R1bGUgfSBmcm9tIFwiLi9hcHAubW9kdWxlXCI7XHJcbmltcG9ydCB7IERlYnVnIH0gZnJvbSAnLi9zZXR0aW5ncyc7XHJcbi8vIEZpcmViYXNlXHJcbmNvbnN0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XHJcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tIFwibmF0aXZlc2NyaXB0LXBsdWdpbi1maXJlYmFzZS9maXJlYmFzZVwiO1xyXG4vLyBHZW9sb2NhdGlvblxyXG5pbXBvcnQgKiBhcyBnZW9sb2NhdGlvbiBmcm9tIFwibmF0aXZlc2NyaXB0LWdlb2xvY2F0aW9uXCI7XHJcbmltcG9ydCB7IEFjY3VyYWN5IH0gZnJvbSBcInVpL2VudW1zXCI7XHJcbi8vIEdvb2dsZSBQbGFjZXNcclxuaW1wb3J0ICogYXMgR29vZ2xlUGxhY2VzIGZyb20gJ25hdGl2ZXNjcmlwdC1wbHVnaW4tZ29vZ2xlLXBsYWNlcyc7XHJcblxyXG4vLyBJbml0IEZpcmViYXNlIEFQSVxyXG5maXJlYmFzZS5pbml0KHtcclxuICBvbkF1dGhTdGF0ZUNoYW5nZWQ6IGZ1bmN0aW9uKGRhdGEpIHsgXHJcbiAgICBpZihEZWJ1Zy5jb25zb2xlLkZpcmViYXNlLmVtYWlsKSBjb25zb2xlLmxvZyhkYXRhLmxvZ2dlZEluID8gXCJMb2dnZWQgaW4gdG8gZmlyZWJhc2U6IFwiICsgZGF0YS51c2VyLmVtYWlsIDogXCJMb2dnZWQgb3V0IGZyb20gZmlyZWJhc2VcIik7XHJcbiAgICBpZiAoZGF0YS5sb2dnZWRJbiAmJiBEZWJ1Zy5jb25zb2xlLkZpcmViYXNlLmZ1bGxVc2VyKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiVXNlciBEYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgb25QdXNoVG9rZW5SZWNlaXZlZENhbGxiYWNrOiBmdW5jdGlvbih0b2tlbikge1xyXG4gICAgY29uc29sZS5sb2coXCJGaXJlYmFzZSBwdXNoIHRva2VuOiBcIiArIHRva2VuKTtcclxuICB9LFxyXG4gIG9uTWVzc2FnZVJlY2VpdmVkQ2FsbGJhY2s6IChtZXNzYWdlOiBNZXNzYWdlKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhgVGl0bGU6ICR7bWVzc2FnZS50aXRsZX1gKTtcclxuICAgIGNvbnNvbGUubG9nKGBCb2R5OiAke21lc3NhZ2UuYm9keX1gKTtcclxuICAgIC8vIGlmIHlvdXIgc2VydmVyIHBhc3NlZCBhIGN1c3RvbSBwcm9wZXJ0eSBjYWxsZWQgJ2ZvbycsIHRoZW4gZG8gdGhpczpcclxuICAgIGNvbnNvbGUubG9nKGBWYWx1ZSBvZiAnZm9vJzogJHttZXNzYWdlLmRhdGEuZm9vfWApO1xyXG4gIH1cclxufSkudGhlbihcclxuICBpbnN0YW5jZSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcImZpcmViYXNlLmluaXQgZG9uZVwiKTtcclxuICB9LFxyXG4gIGVycm9yID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGBmaXJlYmFzZS5pbml0IGVycm9yOiAke2Vycm9yfWApO1xyXG4gIH1cclxuKTtcclxuXHJcbmZpcmViYXNlLmFkbW9iLnNob3dCYW5uZXIoe1xyXG4gIHNpemU6IGZpcmViYXNlLmFkbW9iLkFEX1NJWkUuU01BUlRfQkFOTkVSLCAvLyBzZWUgZmlyZWJhc2UuYWRtb2IuQURfU0laRSBmb3IgYWxsIG9wdGlvbnNcclxuICBtYXJnaW5zOiB7IC8vIG9wdGlvbmFsIG5yIG9mIGRldmljZSBpbmRlcGVuZGVudCBwaXhlbHMgZnJvbSB0aGUgdG9wIG9yIGJvdHRvbSAoZG9uJ3Qgc2V0IGJvdGgpXHJcbiAgICBib3R0b206IDEwLFxyXG4gICAgdG9wOiAwXHJcbiAgfSxcclxuICBhbmRyb2lkQmFubmVySWQ6IFwiY2EtYXBwLXB1Yi03OTY5NjE4NDQxMjE3NzIwLzkwNTM3MDM0MTVcIixcclxuICB0ZXN0aW5nOiB0cnVlLCAvLyB3aGVuIG5vdCBydW5uaW5nIGluIHByb2R1Y3Rpb24gc2V0IHRoaXMgdG8gdHJ1ZSwgR29vZ2xlIGRvZXNuJ3QgbGlrZSBpdCBhbnkgb3RoZXIgd2F5XHJcbiAgLy8gaW9zVGVzdERldmljZUlkczogWyAvL0FuZHJvaWQgYXV0b21hdGljYWxseSBhZGRzIHRoZSBjb25uZWN0ZWQgZGV2aWNlIGFzIHRlc3QgZGV2aWNlIHdpdGggdGVzdGluZzp0cnVlLCBpT1MgZG9lcyBub3RcclxuICAvLyAgICAgXCI0NWQ3N2JmNTEzZGZhYmMyOTQ5YmEwNTNkYTgzYzBjN2I3ZTg3NzE1XCIsIC8vIEVkZHkncyBpUGhvbmUgNnNcclxuICAvLyAgICAgXCJmZWU0Y2YzMTlhMjQyZWFiNDcwMTU0M2U0YzE2ZGI4OWM3MjI3MzFmXCIgIC8vIEVkZHkncyBpUGFkIFByb1xyXG4gIC8vIF1cclxufSkudGhlbihcclxuICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJBZE1vYiBiYW5uZXIgc2hvd2luZ1wiKTtcclxuICAgIH0sXHJcbiAgICBmdW5jdGlvbiAoZXJyb3JNZXNzYWdlKSB7XHJcbiAgICAgIGFsZXJ0KHtcclxuICAgICAgICB0aXRsZTogXCJBZE1vYiBlcnJvclwiLFxyXG4gICAgICAgIG1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcclxuICAgICAgICBva0J1dHRvblRleHQ6IFwiSG1ta2F5XCJcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbik7XHJcblxyXG4vLyBJbml0IExvY2F0aW9uXHJcbmlmICghZ2VvbG9jYXRpb24uaXNFbmFibGVkKSBnZW9sb2NhdGlvbi5lbmFibGVMb2NhdGlvblJlcXVlc3QoKTtcclxuLy8gSW5pdCBHb29nbGUgUGxhY2VzIEFQSVxyXG5Hb29nbGVQbGFjZXMuaW5pdCgpO1xyXG5cclxucGxhdGZvcm1OYXRpdmVTY3JpcHREeW5hbWljKCkuYm9vdHN0cmFwTW9kdWxlKEFwcE1vZHVsZSk7XHJcbiJdfQ==
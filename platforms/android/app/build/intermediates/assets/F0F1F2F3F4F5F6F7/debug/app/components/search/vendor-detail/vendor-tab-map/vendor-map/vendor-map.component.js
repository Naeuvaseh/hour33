"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var element_registry_1 = require("nativescript-angular/element-registry");
var settings_1 = require("../../../../../settings");
var nativescript_google_maps_sdk_1 = require("nativescript-google-maps-sdk");
element_registry_1.registerElement('MapView', function () { return nativescript_google_maps_sdk_1.MapView; });
var VendorMapComponent = (function () {
    function VendorMapComponent() {
        this.zoom = 16;
        this.minZoom = 0;
        this.maxZoom = 22;
        this.bearing = 0;
        this.tilt = 0;
        this.theme = settings_1.Theme;
    }
    VendorMapComponent.prototype.ngOnInit = function () {
        console.log('VendorMapComonent.ngOnInit() Vendor Location: ' + JSON.stringify(this.vendor.result.geometry));
    };
    VendorMapComponent.prototype.onMapReady = function (event) {
        console.log("Map Ready");
        this.mapView = event.object;
        this.mapView.settings.tiltGesturesEnabled = false;
        this.mapView.settings.myLocationButtonEnabled = false;
        this.mapView.settings.compassEnabled = false;
        this.bounds = nativescript_google_maps_sdk_1.Bounds.fromCoordinates(nativescript_google_maps_sdk_1.Position.positionFromLatLng(this.vendor.result.geometry.viewport.southwest.lat, this.vendor.result.geometry.viewport.southwest.lng), nativescript_google_maps_sdk_1.Position.positionFromLatLng(this.vendor.result.geometry.viewport.northeast.lat, this.vendor.result.geometry.viewport.northeast.lng));
        this.mapView.setViewport(this.bounds);
        this.mapView.latitude = this.vendor.result.geometry.location.lat;
        this.mapView.longitude = this.vendor.result.geometry.location.lng;
        this.mapView.zoom = this.zoom;
        console.log('MapView Location: Lat: ' + this.mapView.latitude + ' Lng: ' + this.mapView.longitude);
        var marker = new nativescript_google_maps_sdk_1.Marker();
        marker.position = nativescript_google_maps_sdk_1.Position.positionFromLatLng(this.vendor.result.geometry.location.lat, this.vendor.result.geometry.location.lng);
        marker.title = "Title Test";
        marker.snippet = "Snippet Test";
        //marker.userData = {index: 1};
        this.mapView.addMarker(marker);
    };
    ;
    VendorMapComponent.prototype.onMarkerEvent = function (args) {
        console.log("Marker Event: '" + args.eventName
            + "' triggered on: " + args.marker.title
            + ", Lat: " + args.marker.position.latitude + ", Lon: " + args.marker.position.longitude, args);
    };
    VendorMapComponent.prototype.onCoordinateTapped = function (args) {
        console.log("Coordinate Tapped, Lat: " + args.position.latitude + ", Lon: " + args.position.longitude, args);
    };
    VendorMapComponent.prototype.onCameraChanged = function (args) {
        console.log("Camera changed: " + JSON.stringify(args.camera), JSON.stringify(args.camera) === this.lastCamera);
        this.lastCamera = JSON.stringify(args.camera);
    };
    __decorate([
        core_1.ViewChild("mapView"),
        __metadata("design:type", nativescript_google_maps_sdk_1.MapView)
    ], VendorMapComponent.prototype, "mapView", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], VendorMapComponent.prototype, "vendor", void 0);
    VendorMapComponent = __decorate([
        core_1.Component({
            selector: 'vendor-map',
            templateUrl: './components/search/vendor-detail/vendor-tab-map/vendor-map/vendor-map.component.html'
        }),
        __metadata("design:paramtypes", [])
    ], VendorMapComponent);
    return VendorMapComponent;
}());
exports.VendorMapComponent = VendorMapComponent;
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var element_registry_1 = require("nativescript-angular/element-registry");
var settings_1 = require("../../../../../settings");
<<<<<<< HEAD
element_registry_1.registerElement("MapView", function () { return require("nativescript-google-maps-sdk").MapView; });
var VendorMapComponent = (function () {
    function VendorMapComponent() {
        this.onMapReady = function (event) {
            console.log("Map Ready");
=======
var nativescript_google_maps_sdk_1 = require("nativescript-google-maps-sdk");
element_registry_1.registerElement('MapView', function () { return nativescript_google_maps_sdk_1.MapView; });
var VendorMapComponent = (function () {
    function VendorMapComponent() {
        var _this = this;
        this.zoom = 16;
        this.minZoom = 0;
        this.maxZoom = 22;
        this.bearing = 0;
        this.tilt = 0;
        this.onMapReady = function (event) {
            console.log("Map Ready");
            _this.mapView = event.object;
            _this.mapView.settings.tiltGesturesEnabled = false;
            _this.mapView.settings.myLocationButtonEnabled = true;
            _this.mapView.settings.compassEnabled = true;
            _this.mapView.latitude = _this.vendor.result.geometry.location.lat;
            _this.mapView.longitude = _this.vendor.result.geometry.location.lng;
            _this.mapView.zoom = _this.zoom;
            console.log('MapView Location: Lat: ' + _this.mapView.latitude + ' Lng: ' + _this.mapView.longitude);
            var marker = new nativescript_google_maps_sdk_1.Marker();
            marker.position = nativescript_google_maps_sdk_1.Position.positionFromLatLng(_this.vendor.result.geometry.location.lat, _this.vendor.result.geometry.location.lng);
            marker.title = "Title Test";
            marker.snippet = "Snippet Test";
            //marker.userData = {index: 1};
            _this.mapView.addMarker(marker);
>>>>>>> ee0648c0654d85533f2dc27ac4f49ec1b6f60a4f
        };
        this.theme = settings_1.Theme;
    }
    VendorMapComponent.prototype.ngOnInit = function () {
<<<<<<< HEAD
        this.lat = 32.1234;
        this.long = 32.12345;
    };
    __decorate([
        core_1.ViewChild("MapView"),
        __metadata("design:type", core_1.ElementRef)
=======
        console.log('VendorMapComonent.ngOnInit() Vendor Location: ' + JSON.stringify(this.vendor.result.geometry));
    };
    VendorMapComponent.prototype.onMarkerEvent = function (args) {
        console.log("Marker Event: '" + args.eventName
            + "' triggered on: " + args.marker.title
            + ", Lat: " + args.marker.position.latitude + ", Lon: " + args.marker.position.longitude, args);
    };
    VendorMapComponent.prototype.onCoordinateTapped = function (args) {
        console.log("Coordinate Tapped, Lat: " + args.position.latitude + ", Lon: " + args.position.longitude, args);
    };
    VendorMapComponent.prototype.onCameraChanged = function (args) {
        console.log("Camera changed: " + JSON.stringify(args.camera), JSON.stringify(args.camera) === this.lastCamera);
        this.lastCamera = JSON.stringify(args.camera);
    };
    __decorate([
        core_1.ViewChild("mapView"),
        __metadata("design:type", nativescript_google_maps_sdk_1.MapView)
>>>>>>> ee0648c0654d85533f2dc27ac4f49ec1b6f60a4f
    ], VendorMapComponent.prototype, "mapView", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], VendorMapComponent.prototype, "vendor", void 0);
    VendorMapComponent = __decorate([
        core_1.Component({
            selector: 'vendor-map',
            templateUrl: './components/search/vendor-detail/vendor-tab-map/vendor-map/vendor-map.component.html'
        }),
        __metadata("design:paramtypes", [])
    ], VendorMapComponent);
    return VendorMapComponent;
}());
exports.VendorMapComponent = VendorMapComponent;
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9yLW1hcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2ZW5kb3ItbWFwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUFnRjtBQUNoRiwwRUFBd0U7QUFFeEUsb0RBQWdEO0FBRWhELGtDQUFlLENBQUMsU0FBUyxFQUFFLGNBQU0sT0FBQSxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQyxPQUFPLEVBQS9DLENBQStDLENBQUMsQ0FBQztBQU1sRjtJQVFFO1FBU0EsZUFBVSxHQUFHLFVBQUMsS0FBSztZQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQztRQVZBLElBQUksQ0FBQyxLQUFLLEdBQUcsZ0JBQUssQ0FBQztJQUNyQixDQUFDO0lBRUQscUNBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDO1FBQ25CLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFkcUI7UUFBckIsZ0JBQVMsQ0FBQyxTQUFTLENBQUM7a0NBQVUsaUJBQVU7dURBQUM7SUFDakM7UUFBUixZQUFLLEVBQUU7O3NEQUFnQjtJQUZiLGtCQUFrQjtRQUo5QixnQkFBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLFlBQVk7WUFDdEIsV0FBVyxFQUFFLHVGQUF1RjtTQUNyRyxDQUFDOztPQUNXLGtCQUFrQixDQXNGOUI7SUFBRCx5QkFBQztDQUFBLEFBdEZELElBc0ZDO0FBdEZZLGdEQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgVmlld0NoaWxkLCBPbkluaXQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IHJlZ2lzdGVyRWxlbWVudCB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9lbGVtZW50LXJlZ2lzdHJ5XCI7XHJcbmltcG9ydCB7IFZlbmRvciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2ludGVyZmFjZXMvdmVuZG9yLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IFRoZW1lIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc2V0dGluZ3MnO1xyXG5cclxucmVnaXN0ZXJFbGVtZW50KFwiTWFwVmlld1wiLCAoKSA9PiByZXF1aXJlKFwibmF0aXZlc2NyaXB0LWdvb2dsZS1tYXBzLXNka1wiKS5NYXBWaWV3KTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAndmVuZG9yLW1hcCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2NvbXBvbmVudHMvc2VhcmNoL3ZlbmRvci1kZXRhaWwvdmVuZG9yLXRhYi1tYXAvdmVuZG9yLW1hcC92ZW5kb3ItbWFwLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVmVuZG9yTWFwQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBAVmlld0NoaWxkKFwiTWFwVmlld1wiKSBtYXBWaWV3OiBFbGVtZW50UmVmO1xyXG4gIEBJbnB1dCgpIHZlbmRvcjogVmVuZG9yO1xyXG5cclxuICBwdWJsaWMgdGhlbWU7XHJcbiAgcHJpdmF0ZSBsYXQ6IG51bWJlcjtcclxuICBwcml2YXRlIGxvbmc6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnRoZW1lID0gVGhlbWU7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpe1xyXG4gICAgdGhpcy5sYXQgPSAzMi4xMjM0O1xyXG4gICAgdGhpcy5sb25nID0gMzIuMTIzNDU7XHJcbiAgfVxyXG5cclxuICBvbk1hcFJlYWR5ID0gKGV2ZW50KSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcIk1hcCBSZWFkeVwiKTtcclxuICB9O1xyXG5cclxuLy8gKioqKioqIE1hcHMgRGVtbyBDb2RlICoqKioqKiAvL1xyXG5cclxuLy8gICBwdWJsaWMgb25NYXBSZWFkeSA9IChldmVudCkgPT4ge1xyXG4vLyAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbi8vICAgICAgICAgLy9hbGVydCh0aGlzLmhlYXRNYXApO1xyXG4vLyAgICAgfSwgMTAwMDApO1xyXG4vLyAgICAgdmFyIG1vZGVsID0gbmV3IE1hcENvbXBvbmVudCh0aGlzLnBhZ2UsIHRoaXMuaHR0cFNlcnZpY2UpO1xyXG4vLyAgICAgbGV0IG1hcFZpZXcgPSBldmVudC5vYmplY3Q7XHJcbi8vICAgICB0aGlzLm1hcFZpZXcgPSBtYXBWaWV3O1xyXG4vLyAgICAgLy9sZXQgcG9seSA9IG5ldyBQb2x5Z29uKCk7XHJcbi8vICAgICAvL3ZhciBwb29vb2x5ID0gW1xyXG4vLyAgICAgLy8gICAgUG9zaXRpb24ucG9zaXRpb25Gcm9tTGF0TG5nKDQwLjE2MDgwNzMwMTQ2NDg4NSwgLTgzLjAwODc5NTM4MDU5MjI5KSxcclxuLy8gICAgIC8vICAgIFBvc2l0aW9uLnBvc2l0aW9uRnJvbUxhdExuZyg0MC4xNjA1MDE4NzM5Njc4NDYsIC04My4wMDg3NzEyNDA3MTExNiksXHJcbi8vICAgICAvLyAgICBQb3NpdGlvbi5wb3NpdGlvbkZyb21MYXRMbmcoNDAuMTYwNDg5NTc0ODQ1MiwgLTgzLjAwODY0NTE3Njg4NzQ2KSxcclxuLy8gICAgIC8vICAgIFBvc2l0aW9uLnBvc2l0aW9uRnJvbUxhdExuZyg0MC4xNjA4MTI0MjYwNzU2MSwgLTgzLjAwODY2NjYzNDU1OTYzKSxcclxuLy8gICAgIC8vICAgIFBvc2l0aW9uLnBvc2l0aW9uRnJvbUxhdExuZyg0MC4xNjA4MDczMDE0NjQ4ODUsIC04My4wMDg3OTUzODA1OTIyOSlcclxuICAgICAgICBcclxuLy8gICAgIC8vXTtcclxuLy8gICAgIC8vcG9seS5hZGRQb2ludHMocG9vb29seSk7XHJcbi8vICAgICAvL3BvbHkuZmlsbENvbG9yID0gbmV3IENvbG9yKFwiI0ZGOTgwMFwiKTtcclxuLy8gICAgIC8vcG9seS5zdHJva2VDb2xvciA9IG5ldyBDb2xvcihcIiMwMDdEQzNcIik7XHJcbi8vICAgICAvL3BvbHkuc3Ryb2tlV2lkdGggPSAyO1xyXG4vLyAgICAgLy9wb2x5LnZpc2libGUgPSB0cnVlO1xyXG4vLyAgICAgLy9tYXBWaWV3LmFkZFBvbHlnb24ocG9seSk7XHJcbi8vICAgICBjb25zb2xlLmxvZyhBY2N1cmFjeS5oaWdoKVxyXG4vLyAgICAgLy9jb25zb2xlLmxvZygndGVzdCcpO1xyXG4vLyAgICAgdmFyIG1hcmtlciA9IG5ldyBtYXBzTW9kdWxlLk1hcmtlcigpO1xyXG4vLyAgICAgLy9jb25zb2xlLmxvZyhtYXBWaWV3KTtcclxuLy8gICAgIG1hcmtlci50aXRsZSA9IFwibWFya2VyMVwiO1xyXG4vLyAgICAgbWFya2VyLnBvc2l0aW9uID0gbWFwc01vZHVsZS5Qb3NpdGlvbi5wb3NpdGlvbkZyb21MYXRMbmcodGhpcy5wb2ludDEubGF0aXR1ZGUsIHRoaXMucG9pbnQxLmxvbmdpdHVkZSk7XHJcbi8vICAgICBtYXJrZXIudXNlckRhdGEgPSB7IGluZGV4OiAxIH07XHJcbi8vICAgICBtYXBWaWV3LmFkZE1hcmtlcihtYXJrZXIpO1xyXG5cclxuLy8gICAgIC8vdGhpcy5hZGRIZWF0KCk7XHJcbi8vICAgICB2YXIgbG9jYXRpb24gPSBnZW9sb2NhdGlvbi5nZXRDdXJyZW50TG9jYXRpb24oeyBkZXNpcmVkQWNjdXJhY3k6IEFjY3VyYWN5LmhpZ2gsIHVwZGF0ZURpc3RhbmNlOiAwLjEsIG1heGltdW1BZ2U6IDUwMDAsIHRpbWVvdXQ6IDIwMDAwIH0pLlxyXG4vLyAgICAgICAgIHRoZW4oKGxvYykgPT4ge1xyXG4vLyAgICAgICAgICAgICBpZiAobG9jKSB7XHJcbi8vICAgICAgICAgICAgICAgICBtb2RlbC5sb2NhdGlvbnMucHVzaChsb2MpO1xyXG4vLyAgICAgICAgICAgICAgICAgLy9hbGVydChKU09OLnN0cmluZ2lmeShsb2MpKTtcclxuLy8gICAgICAgICAgICAgICAgIC8vIFdyaXRpbmcgdGV4dCB0byB0aGUgZmlsZS5cclxuLy8gICAgICAgICAgICAgICAgIGxldCB0ZW1wTWFya2VyID0geyBsYXRpdHVkZTogbG9jLmxhdGl0dWRlLCBsb25naXR1ZGU6IGxvYy5sb25naXR1ZGUsIHRpdGxlOiAnbWUnIH07XHJcbiAgICAgICAgICAgICAgICBcclxuLy8gICAgICAgICAgICAgICAgIC8vYWxlcnQoSlNPTi5zdHJpbmdpZnkodGVtcE1hcmtlcikpXHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLm1hcmtlcnMucHVzaCh0ZW1wTWFya2VyKTtcclxuLy8gICAgICAgICAgICAgICAgIC8vYWxlcnQoSlNPTi5zdHJpbmdpZnkodGhpcy5tYXJrZXJzKSlcclxuLy8gICAgICAgICAgICAgICAgdmFyIG1hcmtlcjIgPSBuZXcgbWFwc01vZHVsZS5NYXJrZXIoKTtcclxuLy8gICAgICAgICAgICAgICAgIG1hcmtlcjIudGl0bGUgPSBcIm1lXCI7XHJcbi8vICAgICAgICAgICAgICAgICBtYXJrZXIyLnBvc2l0aW9uID0gbWFwc01vZHVsZS5Qb3NpdGlvbi5wb3NpdGlvbkZyb21MYXRMbmcobG9jLmxhdGl0dWRlLCBsb2MubG9uZ2l0dWRlKTtcclxuLy8gICAgICAgICAgICAgICAgIG1hcmtlcjIudXNlckRhdGEgPSB7IGluZGV4OiAxIH07XHJcbi8vICAgICAgICAgICAgICAgICBtYXBWaWV3LmFkZE1hcmtlcihtYXJrZXIyKTtcclxuICAgICAgICAgICAgICAgIFxyXG4vLyAgICAgICAgICAgICAgICAgdGhpcy5tYXJrZXJzLnB1c2gobWFya2VyKVxyXG4vLyAgICAgICAgICAgICAgICAgLy9hbGVydCh0aGlzLm1hcmtlcnMpXHJcbi8vICAgICAgICAgICAgICAgICAvL2NvbnNvbGUuZGlyKHRoaXMubWFya2VycylcclxuLy8gICAgICAgICAgICAgICAgIC8vY29uc29sZS5kaXIoT2JqZWN0LmtleXMobWFwVmlldykpXHJcbi8vICAgICAgICAgICAgICAgICAvL2NvbnNvbGUuZGlyKG1hcFZpZXcuX21hcmtlcnMpXHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLmxvYWRlci5oaWRlKCk7XHJcbi8vICAgICAgICAgICAgICAgICB0aGlzLndhdGNoTG9jYXRpb24obW9kZWwsIG1hcFZpZXcpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHtcclxuLy8gICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvciEhISEhISExOiBcIiArIGUubWVzc2FnZSk7XHJcbi8vICAgICAgICAgICAgIHRoaXMub25NYXBSZWFkeShldmVudCk7XHJcbi8vICAgICAgICAgfSk7XHJcbi8vICAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcclxuLy8gfTtcclxufSJdfQ==
=======
//# sourceMappingURL=data:application/json;base64,
>>>>>>> ee0648c0654d85533f2dc27ac4f49ec1b6f60a4f
